/*
 *	engine/util/Observer.h generated by engine3 IDL compiler 0.70
 */

#ifndef OBSERVER_H_
#define OBSERVER_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace engine {
namespace log {

class Logger;

} // namespace log
} // namespace engine

using namespace engine::log;

namespace engine {
namespace util {

class Observable;

class ObservablePOD;

} // namespace util
} // namespace engine

using namespace engine::util;

#include "engine/core/ManagedObject.h"

namespace engine {
namespace util {

class Observer : public ManagedObject {
public:
	Observer();

	int notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	unsigned long long getObjectID();

	/**
	 * Compares object ids of this object with obj
	 * @pre { this object is locked, obj is not null }
	 * @post {this object is locked }
	 * @param obj SceneObject that will be compared to
	 * @return returns 1 if this < obj, -1 if this > obj and 0 if this == obj
	 */
	int compareTo(Observer* obj);

	void setObserverType(unsigned int type);

	bool isObserverType(unsigned int type) const;

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	Observer(DummyConstructorParameter* param);

	virtual ~Observer();

	friend class ObserverHelper;
};

} // namespace util
} // namespace engine

using namespace engine::util;

namespace engine {
namespace util {

class ObserverImplementation : public ManagedObjectImplementation {
protected:
	unsigned int observerType;

public:
	ObserverImplementation();

	ObserverImplementation(DummyConstructorParameter* param);

	virtual int notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	virtual unsigned long long getObjectID();

	/**
	 * Compares object ids of this object with obj
	 * @pre { this object is locked, obj is not null }
	 * @post {this object is locked }
	 * @param obj SceneObject that will be compared to
	 * @return returns 1 if this < obj, -1 if this > obj and 0 if this == obj
	 */
	int compareTo(Observer* obj);

	void setObserverType(unsigned int type);

	virtual bool isObserverType(unsigned int type) const;

	WeakReference<Observer*> _this;

	operator const Observer*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	virtual void writeJSON(nlohmann::json& j);
protected:
	virtual ~ObserverImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class Observer;
};

class ObserverAdapter : public ManagedObjectAdapter {
public:
	ObserverAdapter(Observer* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	unsigned long long getObjectID();

	int compareTo(Observer* obj);

	void setObserverType(unsigned int type);

	bool isObserverType(unsigned int type) const;

};

class ObserverHelper : public DistributedObjectClassHelper, public Singleton<ObserverHelper> {
	static ObserverHelper* staticInitializer;

public:
	ObserverHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ObserverHelper>;
};

} // namespace util
} // namespace engine

using namespace engine::util;

namespace engine {
namespace util {

class ObserverPOD : public ManagedObjectPOD {
public:
	Optional<unsigned int> observerType;

	String _className;
	ObserverPOD();
	virtual void writeJSON(nlohmann::json& j);
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~ObserverPOD();

};

} // namespace util
} // namespace engine

using namespace engine::util;

#endif /*OBSERVERPOD_H_*/
