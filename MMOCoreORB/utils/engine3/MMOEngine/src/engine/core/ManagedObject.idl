/*
** Copyright (C) 2007-2019 SWGEmu
** See file COPYING for copying conditions.
*/

package engine.core;

include system.lang.Object;
include system.thread.ReadWriteLock;
include system.thread.Lockable;

include system.io.Serializable;
include system.io.ObjectInputStream;
include system.io.ObjectOutputStream;

include engine.orb.object.DistributedObjectServant;

include engine.util.JSONSerializationType;

@json
class ManagedObject {
	protected int persistenceLevel;

	private transient unsigned int lastCRCSave;
	private transient unsigned int lastSaveTime;

	protected transient string _className; //idlc automatically loads/saves this from streams

	public ManagedObject() {
		persistenceLevel = 0;

		lastCRCSave = 0;

		lastSaveTime = 0;
	}

	/*@nativeStub
	public native void acquireWeak(WeakReference<ManagedObject> ref);

	@nativeStub
	public native void releaseWeak(WeakReference<ManagedObject> ref);*/

	@nativeStub
	public native void updateForWrite();

	@nativeStub
	public native void lock(boolean doLock = true);

	@nativeStub
	public native void lock(ManagedObject obj);

	@local
	@nativeStub
	public native void lock(Lockable obj);

	@nativeStub
	public native void rlock(boolean doLock = true);

	@nativeStub
	public native void rlock(ManagedObject obj);

	@nativeStub
	@local
	public native void rlock(Lockable obj);

	@nativeStub
	public native void wlock(boolean doLock = true);

	@nativeStub
	public native void wlock(ManagedObject obj);

	@nativeStub
	public native void unlock(boolean doLock = true);

	@nativeStub
	public native void runlock(boolean doLock = true);

	@nativeStub
	public native void setLockName(final string name);

	@nativeStub
	public native boolean notifyDestroy();

	/*public abstract void writeObject(string data) {
		Serializable.writeObject(data);
	}*/

	@local
	@nativeStub
	@noImplementationDeclaration
	public native void writeObject(ObjectOutputStream stream);

	@local
	@nativeStub
	@noImplementationDeclaration
	public native void writeJSON(@dereferenced JSONSerializationType j);

	@read
	@local
	public native string toStringData();

	@local
	@noImplementationDeclaration
	@dirty
	public native void readObject(ObjectInputStream stream);

	@dirty
	@local
	public boolean toBinaryStream(ObjectOutputStream stream) {
		writeObject(stream);
		return true;
	}

	@local
	public boolean parseFromBinaryStream(ObjectInputStream stream) {
		readObject(stream);
		return true;
	}

	/**
	 * Gets called when this objects is loaded from database
	 * @pre { this locked }
	 * @post { this locked }
	 */
	@dirty
	public abstract void notifyLoadFromDatabase() {

	}

	/*public abstract void readObject(final string data) {
		Serializable.readObject(data);

		initializeTransientMembers();
	}*/

	@local
	@nativeStub
	public native DistributedObjectServant getServant();

	@dirty
	public abstract native void initializeTransientMembers();

	public native void updateToDatabase();

	@read
	public unsigned int getLastCRCSave() {
		return lastCRCSave;
	}

	@dirty
	public void setLastCRCSave(unsigned int crc) {
		lastCRCSave = crc;
	}

	@read
	public unsigned int getLastSaveTime() {
		return lastSaveTime;
	}

	@dirty
	public void setLastSaveTime(unsigned int timeval) {
		lastSaveTime = timeval;
	}

	@read
	public boolean isPersistent() {
		return persistenceLevel != 0;
	}

	@read
	public int getPersistenceLevel() {
		return persistenceLevel;
	}

	@dirty
	protected void _setClassName(final string name) {
		_className = name;
	}

	/**
	 * Sets the persistence level of the object
	 * level 0 makes the object transient
	 * level 1 makes the object persistent
	 */
	@local
	public native void setPersistent(int level);
}
