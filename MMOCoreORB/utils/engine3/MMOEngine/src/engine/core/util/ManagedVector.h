/*
 *	engine/core/util/ManagedVector.h generated by engine3 IDL compiler 0.70
 */

#ifndef MANAGEDVECTOR_H_
#define MANAGEDVECTOR_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

#include "engine/core/ManagedObject.h"

namespace engine {
namespace core {
namespace util {

class ManagedVector : public ManagedObject {
public:
	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ManagedVector(DummyConstructorParameter* param);

	virtual ~ManagedVector();

	friend class ManagedVectorHelper;
};

} // namespace util
} // namespace core
} // namespace engine

using namespace engine::core::util;

namespace engine {
namespace core {
namespace util {

class ManagedVectorImplementation : public ManagedObjectImplementation {

public:
	ManagedVectorImplementation();
	ManagedVectorImplementation(DummyConstructorParameter* param);

	WeakReference<ManagedVector*> _this;

	operator const ManagedVector*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~ManagedVectorImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ManagedVector;
};

class ManagedVectorAdapter : public ManagedObjectAdapter {
public:
	ManagedVectorAdapter(ManagedVector* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

};

class ManagedVectorHelper : public DistributedObjectClassHelper, public Singleton<ManagedVectorHelper> {
	static ManagedVectorHelper* staticInitializer;

public:
	ManagedVectorHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ManagedVectorHelper>;
};

} // namespace util
} // namespace core
} // namespace engine

using namespace engine::core::util;

namespace engine {
namespace core {
namespace util {

class ManagedVectorPOD : public ManagedObjectPOD {
public:

	ManagedVectorPOD();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~ManagedVectorPOD();

};

} // namespace util
} // namespace core
} // namespace engine

using namespace engine::core::util;

#endif /*MANAGEDVECTORPOD_H_*/
