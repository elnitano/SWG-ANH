/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.tangible.wearables;

import server.zone.objects.tangible.Container;
import server.zone.packets.scene.AttributeListMessage;
include server.zone.objects.manufactureschematic.craftingvalues.CraftingValues;
include server.zone.objects.tangible.attachment.Attachment;
import server.zone.objects.creature.CreatureObject;

include system.util.VectorMap;

@json
class WearableContainerObject extends Container {
	protected int socketCount;
	protected boolean socketsGenerated;
	protected int usedSocketCount;

	protected int modsNotInSockets;

	public static final int MAXSOCKETS = 4;
	public static final int MIN_SOCKET_MOD = 60;
	public static final boolean ALLOW_SEA = false;

	@dereferenced
	protected VectorMap<string, int> wearableSkillMods;

	public WearableContainerObject() {
		super();
		socketsGenerated = false;
		socketCount = 0;
		usedSocketCount = 0;
		modsNotInSockets = 0;

		Logger.setLoggingName("WearableContainerObject");
		wearableSkillMods.setAllowOverwriteInsertPlan();
	}

	public native void initializeTransientMembers();

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	@local
	@dirty
	public native void fillAttributeList(AttributeListMessage msg, CreatureObject object);

	@local
	public native void updateCraftingValues(CraftingValues values, boolean initialUpdate);

	public abstract void addSkillMod(final int skillType, final string skillMod, int value, boolean notifyClient = true) {
		wearableSkillMods.put(skillMod, value);
	}

	@read
	public abstract native void applySkillModsTo(CreatureObject creature);

	public abstract native void removeSkillModsFrom(CreatureObject creature);

	@local
	@read
	public final VectorMap<string, int> getWearableSkillMods() {
		return wearableSkillMods;
	}

	@dirty
	public native boolean isEquipped();

	@dirty
	public boolean isWearableContainerObject() {
		return true;
	}

	@read
	public int getRemainingSockets() {
		return socketCount - usedSocketCount;
	}

	private native void generateSockets(CraftingValues craftingValues);

	public void setMaxSockets(int maxSockets) {
		if (maxSockets < 0) {
			maxSockets = 0;
		} else if (maxSockets > MAXSOCKETS) {
			maxSockets = MAXSOCKETS;
		}
		socketCount = maxSockets;
		socketsGenerated = true;
	}
}
